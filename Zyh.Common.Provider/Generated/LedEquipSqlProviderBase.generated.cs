//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zyh.Common.Provider.Base
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;
    using System.Linq;
    using Zyh.Common.Entity;
    using Dm;
    
    
    public abstract partial class LedEquipSqlProviderBase : SqlProviderBase<LedEquipEntity>
    {
        
        protected const string TableName = "T_LED_EQUIP";
        protected const string Exists_LedEquip_Sql = @"SELECT COUNT(*) FROM T_LED_EQUIP
WHERE ID=:Id";
        protected const string Get_LedEquip_Sql = @"SELECT * FROM T_LED_EQUIP
WHERE ID=:Id";
        protected const string Find_LedEquip_Sql = @"SELECT * FROM T_LED_EQUIP WHERE 1=1";
        protected const string GetPager_LedEquip_Sql = @"SELECT *, ROW_NUMBER() OVER(ORDER BY NOW())AS RowIndex FROM T_LED_EQUIP WHERE 1=1";
        protected const string Insert_LedEquip_Sql = @"INSERT INTO T_LED_EQUIP
VALUES
(:Id, :Name, :Type, :Alarm, :ApplyAt)";
        protected const string Update_LedEquip_Sql = @"UPDATE T_LED_EQUIP
SET ID=:Id, NAME=:Name, TYPE=:Type, ALARM=:Alarm, APPLY_AT=:ApplyAt
WHERE ID=:Id";
        protected const string Delete_LedEquip_Sql = @"DELETE FROM T_LED_EQUIP
WHERE ID=:Id";
        
        public LedEquipSqlProviderBase() : 
                base()
        {
        }
        
        public LedEquipSqlProviderBase(string connectionName) : 
                base(connectionName)
        {
        }
        
        public virtual Boolean Exists(String id)
        {

            using var cmd = DatabaseObject.GetSqlStringCommand(Exists_LedEquip_Sql);
            cmd.Parameters.Add(new DmParameter("Id", DmDbType.VarChar) { Value = id, Direction = ParameterDirection.Input });
            var result = DataContextObject.ExecuteScalar(cmd);
            return Convert.ToInt32(result) > 0;
        }
        
        public virtual LedEquipEntity Get(String id)
        {

            LedEquipEntity result = null;
            using var cmd = DatabaseObject.GetSqlStringCommand(Get_LedEquip_Sql);
            cmd.Parameters.Add(new DmParameter("Id", DmDbType.VarChar) { Value = id, Direction = ParameterDirection.Input });
            using (var reader = DataContextObject.ExecuteReader(cmd))
            {
                if (reader.Read())
                {
                    result = Fill(reader);
                }
            }
            return result;
        }
        
        public virtual List<LedEquipEntity> FindAll(String whereClause)
        {

            var result = new List<LedEquipEntity>();
            var sql = Find_LedEquip_Sql + whereClause;
            using var cmd = DatabaseObject.GetSqlStringCommand(sql);
            using (var reader = DataContextObject.ExecuteReader(cmd))
            {
                while (reader.Read())
                {
                    var ent = Fill(reader);
                    result.Add(ent);
                }
            }
            return result;
        }
        
        public virtual List<LedEquipEntity> GetPager(Int32 pageIndex, Int32 pageSize, String whereClause)
        {

            var result = new List<LedEquipEntity>();
            Int32 tempIndex = pageIndex <= 0 ? 1 : pageIndex;
            Int32 tempSize = pageSize < 0 ? 0 : pageSize;
            Int32 startIndex = (tempIndex - 1) * tempSize + 1;
            Int32 endIndex = tempIndex * tempSize;
            var pageSql = $"SELECT * FROM ({GetPager_LedEquip_Sql + whereClause}) AS subquery where RowIndex between {startIndex} and {endIndex}";
            using var cmd = DatabaseObject.GetSqlStringCommand(pageSql);
            using (var reader = DataContextObject.ExecuteReader(cmd))
            {
                while (reader.Read())
                {
                    var ent = Fill(reader);
                    result.Add(ent);
                }
            }
            return result;
        }
        
        public virtual Int32 Add(LedEquipEntity ent)
        {

            using var cmd = DatabaseObject.GetSqlStringCommand(Insert_LedEquip_Sql) as DmCommand;
            cmd.Parameters.Add(new DmParameter("Id", DmDbType.VarChar) { Value = ent.ID, Direction = ParameterDirection.Input });
            var nonKeyParams = BuildParametersForNonKey(ent);
            cmd.Parameters.AddRange(nonKeyParams);
            var execResult = DataContextObject.ExecuteNonQuery(cmd);
            return execResult;
        }
        
        public virtual Int32 Add(IEnumerable<LedEquipEntity> list)
        {
            if (list == null || !list.Any())
            {
                return 0;
            }
            const string InsertIntoClause = "INSERT INTO T_LED_EQUIP VALUES ";
            var valueClauses = new List<String>(list.Count());
            var index = 0;
            foreach (var ent in list)
            {
                var clause = $"(:id_{index}, :name_{index}, :type_{index}, :alarm_{index}, :apply_at_{index})";
                valueClauses.Add(clause);
                index++;
            }
            var sql = InsertIntoClause + string.Join(",", valueClauses) + ";";
            using var cmd = DatabaseObject.GetSqlStringCommand(sql) as DmCommand;
            var parameters = BuildParameters(list);
            cmd.Parameters.AddRange(parameters);
            return DataContextObject.ExecuteNonQuery(cmd);
        }
        
        public virtual Int32 Update(LedEquipEntity ent)
        {
            var parameters = BuildParameters(ent);
            using var cmd = DatabaseObject.GetSqlStringCommand(Update_LedEquip_Sql) as DmCommand;
            cmd.Parameters.AddRange(parameters);
            return DataContextObject.ExecuteNonQuery(cmd);
        }
        
        public virtual Int32 Delete(String id)
        {

            using var cmd = DatabaseObject.GetSqlStringCommand(Delete_LedEquip_Sql);
            cmd.Parameters.Add(new DmParameter("Id", DmDbType.VarChar) { Value = id, Direction = ParameterDirection.Input });
            return DataContextObject.ExecuteNonQuery(cmd);
        }
        
        public virtual DbParameter[] BuildParameters(LedEquipEntity ent)
        {
            if (ent == null)
            {
                return null;
            }
            var paramList = new DmParameter[5];
            paramList[0] = new DmParameter("Id", DmDbType.VarChar) { Value = ent.ID, Direction = ParameterDirection.Input };
            paramList[1] = new DmParameter("Name", DmDbType.VarChar) { Value = ent.NAME, Direction = ParameterDirection.Input };
            paramList[2] = new DmParameter("Type", Dm.DmDbType.Int32) { Value = ent.TYPE, Direction = ParameterDirection.Input };
            paramList[3] = new DmParameter("Alarm", Dm.DmDbType.Byte) { Value = ent.ALARM, Direction = ParameterDirection.Input };
            paramList[4] = new DmParameter("ApplyAt", Dm.DmDbType.DateTime) { Value = ent.APPLY_AT, Direction = ParameterDirection.Input };
            return paramList;
        }
        
        public virtual DbParameter[] BuildParameters(IEnumerable<LedEquipEntity> list)
        {
            if (list == null || !list.Any())
            {
                return null;
            }
            var paramList = new List<DmParameter>(list.Count() * 5);
            var index = 0;
            foreach (var ent in list)
            {
                paramList.Add(new DmParameter($"id_{index}", DmDbType.VarChar) { Value = ent.ID, Direction = ParameterDirection.Input });
                paramList.Add(new DmParameter($"name_{index}", DmDbType.VarChar) { Value = ent.NAME, Direction = ParameterDirection.Input });
                paramList.Add(new DmParameter($"type_{index}", Dm.DmDbType.Int32) { Value = ent.TYPE, Direction = ParameterDirection.Input });
                paramList.Add(new DmParameter($"alarm_{index}", Dm.DmDbType.Byte) { Value = ent.ALARM, Direction = ParameterDirection.Input });
                paramList.Add(new DmParameter($"apply_at_{index}", Dm.DmDbType.DateTime) { Value = ent.APPLY_AT, Direction = ParameterDirection.Input });
            }
            return paramList.ToArray();
        }
        
        public virtual DbParameter[] BuildParametersForNonKey(LedEquipEntity ent)
        {

            var paramList = new DmParameter[5];
            paramList[0] = new DmParameter("ID", DmDbType.VarChar) { Value = ent.ID, Direction = ParameterDirection.Input };
            paramList[1] = new DmParameter("NAME", DmDbType.VarChar) { Value = ent.NAME, Direction = ParameterDirection.Input };
            paramList[2] = new DmParameter("TYPE", Dm.DmDbType.Int32) { Value = ent.TYPE, Direction = ParameterDirection.Input };
            paramList[3] = new DmParameter("ALARM", Dm.DmDbType.Byte) { Value = ent.ALARM, Direction = ParameterDirection.Input };
            paramList[4] = new DmParameter("APPLY_AT", Dm.DmDbType.DateTime) { Value = ent.APPLY_AT, Direction = ParameterDirection.Input };
            return paramList;
        }
        
        public static LedEquipEntity Fill(IDataReader reader, Int32 start, out Int32 length)
        {
            var ent = new LedEquipEntity();
            length = 5;
            ent.ID = reader[(start + 0)] == DBNull.Value ? default(String) : reader.GetString(start + 0);
            ent.NAME = reader[(start + 1)] == DBNull.Value ? default(String?) : (String?)reader.GetString(start + 1);
            ent.TYPE = reader[(start + 2)] == DBNull.Value ? default(Int32) : reader.GetInt32(start + 2);
            ent.ALARM = reader[(start + 3)] == DBNull.Value ? default(Boolean) : Convert.ToBoolean(reader.GetByte(start + 3));
            ent.APPLY_AT = reader[(start + 4)] == DBNull.Value ? default(DateTime) : reader.GetDateTime(start + 4);
            return ent;
        }
        
        public static LedEquipEntity Fill(IDataReader reader)
        {
            var ent = new LedEquipEntity();
            ent.ID = reader["ID"] == DBNull.Value ? default(String) : reader.GetString(reader.GetOrdinal("ID"));
            ent.NAME = reader["NAME"] == DBNull.Value ? default(String?) : (String?)reader.GetString(reader.GetOrdinal("NAME"));
            ent.TYPE = reader["TYPE"] == DBNull.Value ? default(Int32) : reader.GetInt32(reader.GetOrdinal("TYPE"));
            ent.ALARM = reader["ALARM"] == DBNull.Value ? default(Boolean) : Convert.ToBoolean(reader.GetByte(reader.GetOrdinal("ALARM")));
            ent.APPLY_AT = reader["APPLY_AT"] == DBNull.Value ? default(DateTime) : reader.GetDateTime(reader.GetOrdinal("APPLY_AT"));
            return ent;
        }
    }
}
